// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique @db.VarChar(255)
  password   String       @db.VarChar(255)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Session    Session[]
  Enrollment Enrollment[]
  Card       Card[]
  Reservation Reservation[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id                 Int      @id @default(autoincrement())
  title              String   @db.VarChar(255)
  backgroundImageUrl String   @db.VarChar(255)
  logoImageUrl       String   @db.VarChar(255)
  startsAt           DateTime
  endsAt             DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Enrollment {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  cpf       String    @db.VarChar(255)
  birthday  DateTime
  phone     String    @db.VarChar(255)
  userId    Int       @unique
  User      User      @relation(fields: [userId], references: [id])
  Address   Address[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id            Int        @id @default(autoincrement())
  cep           String     @db.VarChar(255)
  street        String     @db.VarChar(255)
  city          String     @db.VarChar(255)
  state         String     @db.VarChar(255)
  number        String     @db.VarChar(255)
  neighborhood  String     @db.VarChar(255)
  addressDetail String?    @db.VarChar(255)
  enrollmentId  Int        @unique
  Enrollment    Enrollment @relation(fields: [enrollmentId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Card {
  id            Int        @id @default(autoincrement())
  number        String        @unique
  name          String
  expiry        String
  cvc           String
  userId        Int
  users         User      @relation(fields: [userId], references: [id])
  Reservation   Reservation[]
  @@map("cards")
}

model Reservation {
  id            Int        @id @default(autoincrement())
  ticket        String
  accommodation String
  userId        Int
  cardId        Int
  createdAt     DateTime   @default(now())
  users         User      @relation(fields: [userId], references: [id])
  cards         Card      @relation(fields: [cardId], references: [id])
  @@map("reservations")
}

model Hotel {
  id            Int        @id @default(autoincrement())
  name          String
  type          String
  vacancies     Int?
  Rooms         Room[]
  @@map("hotels")
}

model Room {
  id            Int        @id @default(autoincrement())
  number        Int
  type          String     @default("Single")
  hotelId       Int
  isBlocked     Boolean    @default(false)
  hotels        Hotel      @relation(fields: [hotelId], references: [id])
  Vacancy       Vacancy[]
  @@map("rooms")
}

model Vacancy {
  id            Int        @id @default(autoincrement())
  userId        Int?          
  roomId        Int
  rooms         Room      @relation(fields: [roomId], references: [id])
  @@map("vacancies")
}

model Eventday {
  id            Int        @id @default(autoincrement())
  weekDay       String
  date          String
  auditoriums   Auditorium[]
  @@index([date])
  @@map("eventdays")
}

model Auditorium {
  id            Int        @id @default(autoincrement())
  title         String
  eventdayId    Int
  dates         Eventday        @relation(fields: [eventdayId], references: [id])
  activity      Activity[]
  @@map("auditoriums")
}

model Activity {
  id            Int        @id @default(autoincrement())
  title         String
  startTime     String
  finishTime    String
  vacancies     Int
  auditoriumId  Int
  auditoriums   Auditorium  @relation(fields: [auditoriumId], references: [id])
  @@map("activities")
}
